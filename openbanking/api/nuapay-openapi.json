{
  "openapi": "3.0.1",
  "info": {
    "title": "Nuapay TPP API Specification",
    "description": "Swagger Spec for the Nuapay TPP OpenBanking/PSD2. Provides PISP and Banks Endpoints",
    "contact": {
      "name": "Nuapay",
      "email": "api.support@nuapay.com"
    },
    "license": {
      "name": "Nuapay",
      "url": "https://sentenial.com"
    },
    "version": "1.14.4",
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://www.nuapay.com/wp-content/uploads/2018/04/nuapay.svg"
    }
  },
  "servers": [
    {
      "url": "https://api.nuapay.com/tpp"
    }
  ],
  "tags": [
    {
      "name": "Bank Service",
      "description": "Bank endpoints allow a merchant to,\n- Retrieve a list of banks that support the Open Banking scheme\n- View details of a specific bank that supports the Open Banking scheme"
    },
    {
      "name": "PISP Service",
      "description": "Payment initiation endpoints allow a merchant to,\n- Initiate payment requests in Open Banking\n- Retrieve the status of a previously initiated payment request"
    }
  ],
  "paths": {
    "/accounts": {
      "get": {
        "tags": [
          "Account Service"
        ],
        "summary": "View Bank Account",
        "description": "Get list of Bank Families",
        "operationId": "getBankFamiliesUsingGET",
        "parameters": [
          {
            "name": "pagenumber",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pagesize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "supportedcurrencies",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "EUR",
                  "GBP"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListBankFamiliesResponseEnvelope"
                },
                "example": {
                  "uri": "/bankFamilies",
                  "data": [
                    {
                      "id": "8ww64y0phx",
                      "uri": "/bankFamilies/8ww64y0phx",
                      "name": "Nuapay France",
                      "logo": "https://www.nuapay.com/wp-content/uploads/2018/04/nuapay.svg",
                      "supportedCurrencies": [
                        "EUR"
                      ]
                    },
                    {
                      "id": "1xf48y2zds",
                      "uri": "/bankFamilies/1xf48y2zds",
                      "name": "Nuapay UK",
                      "logo": "https://www.nuapay.com/wp-content/uploads/2018/04/nuapay.svg",
                      "supportedCurrencies": [
                        "GBP"
                      ]
                    }
                  ],
                  "page": {
                    "pageNumber": 1,
                    "pageSize": 10,
                    "totalElements": 2,
                    "totalPages": 1
                  },
                  "sort": []
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "returnCode": "T0000",
                  "returnDescription": "Validation errors occurred. Please see details.",
                  "details": {
                    "code": "T0001",
                    "description": "Page  is invalid",
                    "field": "page"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "headers": {
              "Retry-After": {
                "description": "Number in seconds to wait",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            },
            "x-sentenial": {
              "enriched": "true"
            }
          }
        },
        "security": [
          {
            "MerchantOAuth2": [
              "openbanking_aisp",
              "openbanking_pisp"
            ]
          },
          {
            "MerchantApiKey": []
          },
          {
            "PartnerOAuth2": [
              "openbanking_aisp",
              "openbanking_pisp"
            ]
          },
          {
            "PartnerApiKey": []
          }
        ]
      }
    },
    "/sccounts/{accountId}": {
      "get": {
        "tags": [
          "Bank Service"
        ],
        "summary": "View Bank Family",
        "description": "View Bank Family Details",
        "operationId": "getBankFamilyUsingGET",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Bank Family id returned by Get Bank Families endpoint.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankFamilyResponseEnvelope"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "returnCode": "T0000",
                  "returnDescription": "Validation errors occurred. Please see details.",
                  "details": {
                    "code": "T0001",
                    "description": "Page  is invalid",
                    "field": "page"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "headers": {
              "Retry-After": {
                "description": "Number in seconds to wait",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            },
            "x-sentenial": {
              "enriched": "true"
            }
          }
        },
        "security": [
          {
            "MerchantOAuth2": [
              "openbanking_aisp",
              "openbanking_pisp"
            ]
          },
          {
            "MerchantApiKey": []
          },
          {
            "PartnerOAuth2": [
              "openbanking_aisp",
              "openbanking_pisp"
            ]
          },
          {
            "PartnerApiKey": []
          }
        ]
      }
    },
    "/banks": {
      "get": {
        "tags": [
          "Bank Service"
        ],
        "summary": "Retrieve Banks",
        "description": "Get Supported Banks On This TPP",
        "operationId": "getBanksUsingGET",
        "parameters": [
          {
            "name": "country",
            "in": "query",
            "description": "CountryCode - ISO country code - indicates where bank is domiciled (ISO 3166 Alpha-2)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "debtoraccountrequired",
            "in": "query",
            "description": "Allows to filter the banks that requires debtor account to be provided when initiating payment.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagenumber",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pagesize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "supportedcurrencies",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "EUR",
                  "GBP"
                ]
              }
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Allows filtering by Bank Family via the Bank Family Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludebankfamily",
            "in": "query",
            "description": "Allows filtering by Banks without an associated Bank Family.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BanksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "returnCode": "T0000",
                  "returnDescription": "Validation errors occurred. Please see details.",
                  "details": {
                    "code": "T0001",
                    "description": "Page  is invalid",
                    "field": "page"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "headers": {
              "Retry-After": {
                "description": "Number in seconds to wait",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            },
            "x-sentenial": {
              "enriched": "true"
            }
          }
        },
        "security": [
          {
            "MerchantOAuth2": [
              "openbanking_aisp",
              "openbanking_pisp"
            ]
          },
          {
            "MerchantApiKey": []
          },
          {
            "PartnerOAuth2": [
              "openbanking_aisp",
              "openbanking_pisp"
            ]
          },
          {
            "PartnerApiKey": []
          }
        ]
      }
    },
    "/payments": {
      "get": {
        "tags": [
          "PISP Service"
        ],
        "summary": "List payments",
        "description": "GET payments list endpoint",
        "operationId": "getPaymentListUsingGet",
        "parameters": [
          {
            "name": "fromdatetime",
            "in": "query",
            "description": "Submission from date time in the format, 'yyyy-MM-dd'T'HH:mm:ss', maximum date from/to date range is 30 days. If neither from/to date is provided returns results for the last 30 days.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "todatetime",
            "in": "query",
            "description": "Submission to date time in the format, 'yyyy-MM-dd'T'HH:mm:ss', maximum date from/to date range is 30 days. If neither from/to date is provided returns results for the last 30 days.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromamount",
            "in": "query",
            "description": "When provided only payments with amount equal or higher than provided amount will be returned",
            "schema": {
              "maximum": 999999999.99,
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "name": "toamount",
            "in": "query",
            "description": "When provided only payments with amount equal or smaller than  provided amount will be returned",
            "schema": {
              "maximum": 999999999.99,
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "name": "userinterfacepaymentid",
            "in": "query",
            "description": "This is used in UI flows to get payment details. Applicable for payments created with REDIRECT, CHECKOUT integration type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentstatus",
            "in": "query",
            "description": "A number of statuses can be queried within a single request by providing multiple occurences of the parameter. If not provided all statuses will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "PENDING_APPROVAL",
                  "OAUTH_CALLBACK_COMPLETE",
                  "AUTHORISED",
                  "DECLINED",
                  "SETTLEMENT_REJECTED",
                  "SETTLEMENT_PENDING",
                  "SETTLEMENT_IN_PROGRESS",
                  "SETTLEMENT_COMPLETE",
                  "CONSENT_API_REJECTED",
                  "TIMEOUT",
                  "CONSENT_TIMEOUT",
                  "UNEXPECTED_ERROR",
                  "UNKNOWN",
                  "PAYMENT_RECEIVED"
                ]
              }
            }
          },
          {
            "name": "payername",
            "in": "query",
            "description": "Payer name. This parameter supports searching with wildcards",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payeremail",
            "in": "query",
            "description": "Payer e-mail. This parameter supports searching with wildcards",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reference",
            "in": "query",
            "description": "Payment reference will attempt to match endToEndIdentification, remittanceInformation.reference and remittanceInformation.unstructured. Will return all matches and partial matches if using wildcard searches. This parameter supports searching with wildcards",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Currency",
            "schema": {
              "type": "string",
              "enum": [
                "EUR",
                "GBP"
              ]
            }
          },
          {
            "name": "pagenumber",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pagesize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListPaymentResponseEnvelope"
                },
                "example": {
                  "uri": "/payments",
                  "data": [
                    {
                      "id": "ybo8zayk2q",
                      "uri": "/payments/ybo8zayk2q",
                      "merchantId": "b0zaq1klpt",
                      "creationDateTime": "2019-02-28T10:43:07.00Z",
                      "amount": 99.99,
                      "countryCode": "GB",
                      "currency": "GBP",
                      "email": "client@example.com",
                      "language": "en",
                      "remittanceInformation": {
                        "unstructured": "The Remittance Information"
                      },
                      "endToEndIdentification": "endToEndIdentification",
                      "orderDetails": {
                        "items": [
                          {
                            "name": "Flights Outbound",
                            "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                            "quantity": 2,
                            "amount": 50
                          },
                          {
                            "name": "Flights Return",
                            "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                            "quantity": 2,
                            "amount": 50
                          },
                          {
                            "name": "Flights Return",
                            "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                            "quantity": 2,
                            "amount": 30
                          },
                          {
                            "name": "Discounts",
                            "amount": -5
                          },
                          {
                            "name": "Total",
                            "amount": 125
                          }
                        ]
                      },
                      "integrationType": "CHECKOUT",
                      "status": "PENDING_APPROVAL",
                      "debtorBankName": "Test Bank Name",
                      "debtorAccount": {
                        "identification": "GB29NWBK60161331926819",
                        "schemeName": "IBAN"
                      },
                      "links": [
                        {
                          "resourceType": "refunds",
                          "uri": "/payments/ybo8zayk2q/refunds"
                        },
                        {
                          "resourceType": "history",
                          "uri": "/payment/{paymentId}/history"
                        }
                      ]
                    }
                  ],
                  "page": {
                    "pageNumber": 1,
                    "pageSize": 10,
                    "totalElements": 1,
                    "totalPages": 1
                  },
                  "sort": []
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "returnCode": "T0000",
                  "returnDescription": "Validation errors occurred. Please see details.",
                  "details": {
                    "code": "T0002",
                    "description": "Field is invalid",
                    "field": "fromdatetime"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "headers": {
              "Retry-After": {
                "description": "Number in seconds to wait",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            },
            "x-sentenial": {
              "enriched": "true"
            }
          }
        },
        "security": [
          {
            "MerchantOAuth2": [
              "openbanking_pisp"
            ]
          },
          {
            "MerchantApiKey": []
          },
          {
            "PartnerOAuth2": [
              "openbanking_pisp"
            ]
          },
          {
            "PartnerApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "PISP Service"
        ],
        "summary": "Create Payment",
        "description": "Create a payment request POST endpoint",
        "operationId": "createPaymentUsingPOST",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Every request will be processed only once per Idempotency-Key.  The Idempotency Key will be valid for 24 hours.",
            "schema": {
              "type": "string",
              "x-sentenial": {
                "enriched": "true"
              }
            },
            "x-sentenial": {
              "enriched": "true"
            }
          },
          {
            "name": "PSU-ID",
            "in": "header",
            "description": "Client ID of the PSU in the ASPSP client interface.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Customer-IP-Address",
            "in": "header",
            "description": "The PSU's IP address if the PSU is currently logged in with the TPP.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Create a Payment Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseEnvelope"
                },
                "example": {
                  "uri": "/payments/re27gry2dw",
                  "data": {
                    "id": "re27gry2dw",
                    "uri": "/payments/re27gry2dw",
                    "endToEndIdentification": "endToEndIdentification123",
                    "debtorAccount": {
                      "identification": 60161331926819,
                      "schemeName": "SortCodeAccountNumber"
                    }
                  },
                  "risk": {
                    "paymentContextCode": "Other"
                  },
                  "remittanceInformation": {
                    "reference": "reference123"
                  },
                  "status": "PENDING_APPROVAL",
                  "amount": 99.99,
                  "currency": "GBP",
                  "countryCode": "GB",
                  "language": "en",
                  "email": "client@example.com",
                  "orderDetails": {
                    "items": [
                      {
                        "name": "Flights Outbound",
                        "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                        "quantity": 2,
                        "amount": 50
                      },
                      {
                        "name": "Flights Return",
                        "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                        "quantity": 2,
                        "amount": 50
                      },
                      {
                        "name": "Flights Return",
                        "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                        "quantity": 2,
                        "amount": 30
                      },
                      {
                        "name": "Discounts",
                        "amount": -5
                      },
                      {
                        "name": "Total",
                        "amount": 125
                      }
                    ]
                  },
                  "integrationType": "SELF_HOSTED",
                  "merchantPostAuthUrl": "https://merchant.openbanking.com/result",
                  "bankId": "lyboxy9bqp",
                  "aspspAuthUrl": "https://any-aspsp.com/openbanking/authorize?response_type=code+id_token&scope=openid+payments&client_id=377aaa6a-70bf-4e95-ac19-2bac5270bacd&redirect_uri=https%3A%2F%2Fapi.nuapay.com%2Ftpp%2Fpayment-requests%2Foauth&state=df78b5f6-12c0-4646-b47c-4362217acb0a&nonce=bea92693-19da-4609-858e-86c79e908a08&request=eyJraWQiOiI2QlJZamgtc0VRUTNmNWlzc0lxWU9WNGNXdVUiLCJ0eXAiOiJKV1QiLCJhbGciOiJQUzI1NiJ9.eyJpc3MiOiIzNzdhYWE2YS03MGJmLTRlOTUtYWMxOS0yYmFjNTI3MGJhY2QiLCJyZXNwb25zZV90eXBlIjoiY29kZSBpZF90b2tlbiIsIm5vbmNlIjoiYmVhOTI2OTMtMTlkYS00NjA5LTg1OGUtODZjNzllOTA4YTA4IiwiY2xpZW50X2lkIjoiMzc3YWFhNmEtNzBiZi00ZTk1LWFjMTktMmJhYzUyNzBiYWNkIiwibWF4X2FnZSI6ODY0MDAsImF1ZCI6Imh0dHBzOlwvXC9hdXRob3Jpc2UtYXBpLmxsb3lkc2JhbmsuY28udWtcL3Byb2QwMVwvY2hhbm5lbFwvbHlkcyIsInNjb3BlIjoib3BlbmlkIHBheW1lbnRzIiwiY2xhaW1zIjp7InVzZXJpbmZvIjp7Im9wZW5iYW5raW5nX2ludGVudF9pZCI6eyJ2YWx1ZSI6IjY0YWQ5NWEwLWUzMWYtNGNiOC04NjM3LTdjOGRmOTc3MTJmOSIsImVzc2VudGlhbCI6dHJ1ZX19LCJpZF90b2tlbiI6eyJvcGVuYmFua2luZ19pbnRlbnRfaWQiOnsidmFsdWUiOiI2NGFkOTVhMC1lMzFmLTRjYjgtODYzNy03YzhkZjk3NzEyZjkiLCJlc3NlbnRpYWwiOnRydWV9LCJhY3IiOnsiZXNzZW50aWFsIjp0cnVlLCJ2YWx1ZXMiOlsidXJuOm9wZW5iYW5raW5nOnBzZDI6c2NhIiwidXJuOm9wZW5iYW5raW5nOnBzZDI6Y2EiXX19fSwicmVkaXJlY3RfdXJpIjoiaHR0cHM6XC9cL2FwaS5udWFwYXkuY29tXC90cHBcL3BheW1lbnQtcmVxdWVzdHNcL29hdXRoIiwic3RhdGUiOiJkZjc4YjVmNi0xMmMwLTQ2NDYtYjQ3Yy00MzYyMjE3YWNiMGEiLCJleHAiOjE1NzU0NTg3MTYsImlhdCI6MTU3NTQ1ODQxNiwianRpIjoiNDQyYmY4N2YtYzIxNC00NjgxLTk3ODYtZjIwZGM1YjIzOWYxIn0.IyeHKQQeU6x32CdUllkskLFWEjkJZKzvp8D4ZOwtlN3v32qmbh4hkGtwNilqZetqqq1ESB1InzfyAlb5S3GyZ_1pTV5UmFqsY60w4jIvSVQXmxKyCYIDrdgTvfa3IYOtA3vStpRpnHyXZfke7mBLGM0nn3YLEmujQ88T1kzq8v9rKTUKwgAE-NYLsYnXNg8dNlrl_lvXVou-J26keS5EaYMVSwHRXcZ8Vp51Hro5L3Py5KyG270RL-7AfJCrEOcvwKbHWOYthoZj1FcuuJWoCT80H1rtkw80vI8QpaQHhp8xYOGft4n6uf2WBhUVb9eBrl9B0GtWe3opBeFXzOtKyg",
                  "merchantId": "gabxwwv2l5",
                  "creationDateTime": "2020-05-01T08:25:29.291Z",
                  "debtorBankName": "Bank Name",
                  "multiAuthorisation": {},
                  "links": [
                    {
                      "id": "re27gry2dw",
                      "resourceType": "refunds",
                      "uri": "/payments/re27gry2dw/refunds"
                    },
                    {
                      "id": "re27gry2dw",
                      "resourceType": "history",
                      "uri": "/payments/re27gry2dw/history"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "returnCode": "T0000",
                  "returnDescription": "Validation errors occurred. Please see details.",
                  "details": {
                    "code": "T0004",
                    "description": "Field is invalid",
                    "field": "email"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "returnCode": "T0000",
                  "returnDescription": "Validation errors occurred. Please see details.",
                  "details": {
                    "code": "T0016",
                    "description": "Amount has to be greater than 0.",
                    "field": "amount"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "headers": {
              "Retry-After": {
                "description": "Number in seconds to wait",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            },
            "x-sentenial": {
              "enriched": "true"
            }
          }
        },
        "security": [
          {
            "MerchantOAuth2": [
              "openbanking_aisp",
              "openbanking_pisp"
            ]
          },
          {
            "MerchantApiKey": []
          }
        ],
        "x-codegen-request-body-name": "paymentRequest"
      }
    },
    "/payments/callback": {
      "post": {
        "tags": [
          "PISP Service"
        ],
        "summary": "Forward Payment Callback",
        "description": "Forward Payment Callback POST endpoint",
        "operationId": "forwardPaymentCallbackPOST",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Every request will be processed only once per Idempotency-Key.  The Idempotency Key will be valid for 24 hours.",
            "schema": {
              "type": "string",
              "x-sentenial": {
                "enriched": "true"
              }
            },
            "x-sentenial": {
              "enriched": "true"
            }
          }
        ],
        "requestBody": {
          "description": "Create a Payment Callback Request",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "example": {
                  "code": "KaIpmx",
                  "state": "3410742c-304d-4311-a54f-323f1f20f96f",
                  "id_token": "eyJraWQiOiJOdWFwYXlCYW5rX0tleUlEIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJjZDBlNDkxNC1jNjRlLTQyODQtYTg0ZS0yYzc2NGI3NzU5MWYiLCJhdWQiOiJ0ZXN0IiwiY19oYXNoIjoiU2VWM1ZYU3YyVHNMVXhLdVdLWE9PUSIsImFjciI6WyJ1cm46b3BlbmJhbmtpbmc6cHNkMjpzY2EiXSwic19oYXNoIjoicjNHcm53YjFzNXZYaHRwOU1oYm1zdyIsIm9wZW5iYW5raW5nX2ludGVudF9pZCI6ImNkMGU0OTE0LWM2NGUtNDI4NC1hODRlLTJjNzY0Yjc3NTkxZiIsImtpZCI6Ik51YXBheUJhbmtfS2V5SUQiLCJpc3MiOiJodHRwczpcL1wvYXBpLmFscGhhbmJhbmsuY29tIiwiZXhwIjoxNTUzMDA4MTkwLCJpYXQiOjE1NTMwMDc1OTAsIm5vbmNlIjoiODJiMTNjMzYtZTIzOC00MDA2LTkzMjQtNDJhZmQ2YjMwOTJlIiwianRpIjoiNGI4ODk3NjQtOWQwMy00YWM1LTg2MDgtOGMzZGU2NzU2N2VkIn0.fRBht6BQtqNxbUKmeoNqzWyFykTVX6zMCLcqvnPt1m665l9a8Zuwa4oaY_-2pULshjwD9yptgRdQ8KbkQ1SddwQacZYwUvzzbE1kV6GwhuwvGNU9TihPvh55eE3nY9kYJywn5m6hgC0x81m1MhMeAikanNZIia7rryB30CKxDMt0sL-5CvnFdyr2_csjuXotekC_weDsY4WNqCu5LfZhVk0IixXNiDXFxxnR9qNOjQ5fTljITWoPQ0G1KYfW3DOs4Nb23oZe8b-RxLebD9R2kBiIWh79oGOg-8RZz36FDNSn5Skt1KAz_c9bv7Vbt-au6VY1_tPdvZ8sgd44M__rZQ"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "ACCEPTED",
            "headers": {
              "Location": {
                "description": "Holds uri of payment that was mapped using provided callback parameters",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "returnCode": "T0000",
                  "returnDescription": "Validation errors occurred. Please see details.",
                  "details": {
                    "code": "T0004",
                    "description": "Field is invalid",
                    "field": "email"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "returnCode": "T0000",
                  "returnDescription": "Validation errors occurred. Please see details.",
                  "details": {
                    "code": "XXXXX",
                    "description": "No payment matched based on provided parameters."
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "headers": {
              "Retry-After": {
                "description": "Number in seconds to wait",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            },
            "x-sentenial": {
              "enriched": "true"
            }
          }
        },
        "security": [
          {
            "MerchantOAuth2": [
              "openbanking_callback"
            ]
          },
          {
            "PartnerOAuth2": [
              "openbanking_callback"
            ]
          }
        ],
        "x-codegen-request-body-name": "paymentCallbackRequest"
      }
    },
    "/payments/{paymentId}": {
      "get": {
        "tags": [
          "PISP Service"
        ],
        "summary": "Retrieve Payment",
        "description": "GET Payment details endpoint",
        "operationId": "getPaymentUsingGET",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "The ID of the payment for which you want to retrieve details",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseEnvelope"
                },
                "example": {
                  "uri": "/payments/ybo8zayk2q",
                  "data": {
                    "id": "ybo8zayk2q",
                    "uri": "/payments/ybo8zayk2q",
                    "merchantId": "b0zaq1klpt",
                    "creationDateTime": "2019-02-28T10:43:07.00Z",
                    "amount": 99.99,
                    "countryCode": "GB",
                    "currency": "GBP",
                    "email": "client@example.com",
                    "language": "en",
                    "remittanceInformation": {
                      "unstructured": "The Remittance Information"
                    },
                    "endToEndIdentification": "endToEndIdentification",
                    "orderDetails": {
                      "items": [
                        {
                          "name": "Flights Outbound",
                          "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                          "quantity": 2,
                          "amount": 50
                        },
                        {
                          "name": "Flights Return",
                          "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                          "quantity": 2,
                          "amount": 50
                        },
                        {
                          "name": "Flights Return",
                          "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                          "quantity": 2,
                          "amount": 30
                        },
                        {
                          "name": "Discounts",
                          "amount": -5
                        },
                        {
                          "name": "Total",
                          "amount": 125
                        }
                      ]
                    },
                    "integrationType": "CHECKOUT",
                    "status": "PENDING_APPROVAL",
                    "debtorAccount": {
                      "identification": "GB29NWBK60161331926819",
                      "schemeName": "IBAN"
                    },
                    "links": [
                      {
                        "resourceType": "refunds",
                        "uri": "/payments/ybo8zayk2q/refunds"
                      },
                      {
                        "resourceType": "history",
                        "uri": "/payment/{paymentId}/history"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "headers": {
              "Retry-After": {
                "description": "Number in seconds to wait",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            },
            "x-sentenial": {
              "enriched": "true"
            }
          }
        },
        "security": [
          {
            "MerchantOAuth2": [
              "openbanking_pisp"
            ]
          },
          {
            "MerchantApiKey": []
          }
        ]
      },
      "patch": {
        "tags": [
          "PISP Service"
        ],
        "summary": "Retry Payment",
        "description": "Retry Payment",
        "operationId": "setBankIdForPaymentUsingPATCH",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "The ID of the payment that you want to retry",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Retry Payment Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetBankPaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseEnvelope"
                },
                "example": {
                  "uri": "/payments/ybo8zayk2q",
                  "data": {
                    "id": "ybo8zayk2q",
                    "uri": "/payments/ybo8zayk2q",
                    "merchantId": "b0zaq1klpt",
                    "creationDateTime": "2019-02-28T10:43:07.00Z",
                    "amount": 99.99,
                    "countryCode": "GB",
                    "currency": "GBP",
                    "email": "client@example.com",
                    "language": "en",
                    "remittanceInformation": {
                      "unstructured": "The Remittance Information"
                    },
                    "endToEndIdentification": "endToEndIdentification",
                    "orderDetails": {
                      "items": [
                        {
                          "name": "Flights Outbound",
                          "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                          "quantity": 2,
                          "amount": 50
                        },
                        {
                          "name": "Flights Return",
                          "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                          "quantity": 2,
                          "amount": 50
                        },
                        {
                          "name": "Flights Return",
                          "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                          "quantity": 2,
                          "amount": 30
                        },
                        {
                          "name": "Discounts",
                          "amount": -5
                        },
                        {
                          "name": "Total",
                          "amount": 125
                        }
                      ]
                    },
                    "integrationType": "CHECKOUT",
                    "bankId": "lyboxy9bqp",
                    "bankName": "Nuapay",
                    "status": "PENDING_APPROVAL",
                    "debtorAccount": {
                      "identification": "GB29NWBK60161331926819",
                      "schemeName": "IBAN"
                    },
                    "links": [
                      {
                        "resourceType": "refunds",
                        "uri": "/payments/ybo8zayk2q/refunds"
                      },
                      {
                        "resourceType": "history",
                        "uri": "/payment/{paymentId}/history"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "returnCode": "T0000",
                  "returnDescription": "Validation errors occurred. Please see details.",
                  "details": {
                    "code": "T0004",
                    "description": "Field is invalid",
                    "field": "bankId"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "returnCode": "T0000",
                  "returnDescription": "Validation errors occurred. Please see details.",
                  "details": [
                    {
                      "code": "TBD",
                      "description": "The payment can't be processed with provided bank.",
                      "field": "bankId"
                    },
                    {
                      "code": "TBD",
                      "description": "Bank cannot be found.",
                      "field": "bankId"
                    }
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "headers": {
              "Retry-After": {
                "description": "Number in seconds to wait",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            },
            "x-sentenial": {
              "enriched": "true"
            }
          }
        },
        "security": [
          {
            "MerchantOAuth2": [
              "openbanking_pisp"
            ]
          }
        ],
        "x-codegen-request-body-name": "setBankForPayment"
      }
    },
    "/payments/{paymentId}/history": {
      "get": {
        "tags": [
          "PISP Service"
        ],
        "summary": "Retrieve Payment  History",
        "description": "Retrieve Payment History",
        "operationId": "getPaymentHistoryUsingGET",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "The ID of the payment for which you want to retrieve audit trail history",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagenumber",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pagesize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentHistoryResponseEnvelope"
                },
                "example": {
                  "uri": "/payments/ybo8zayk2q/history",
                  "data": [
                    {
                      "status": "PENDING",
                      "createDateTime": "2019-02-28T10:43:07+00:00"
                    },
                    {
                      "status": "PENDING_APPROVAL",
                      "createDateTime": "2019-02-28T10:44:07+01:00"
                    }
                  ],
                  "page": {
                    "pageNumber": 1,
                    "pageSize": 10,
                    "totalElements": 1,
                    "totalPages": 1
                  },
                  "sort": []
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "returnCode": "T0000",
                  "returnDescription": "Validation errors occurred. Please see details.",
                  "details": {
                    "code": "T0001",
                    "description": "Page Number is invalid",
                    "field": "page"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "headers": {
              "Retry-After": {
                "description": "Number in seconds to wait",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            },
            "x-sentenial": {
              "enriched": "true"
            }
          }
        },
        "security": [
          {
            "MerchantOAuth2": [
              "openbanking_pisp_read"
            ]
          },
          {
            "MerchantApiKey": []
          }
        ]
      }
    },
    "/payments/{paymentId}/refunds": {
      "get": {
        "tags": [
          "PISP Service"
        ],
        "summary": "List Payment Refunds",
        "description": "List refunds using GET",
        "operationId": "listRefundsUsingGET",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "The ID of the payment for which you want to list refunds",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromcreationdatetime",
            "in": "query",
            "description": "Submission from date time in the format, 'yyyy-MM-dd'T'HH:mm:ss', maximum create date from/to create date range is 30 days. If neither from/to date is provided returns results for the last 30 days.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tocreationdatetime",
            "in": "query",
            "description": "Submission to date time in the format, 'yyyy-MM-dd'T'HH:mm:ss', maximum create date from/to create date range is 30 days. If neither from/to date is provided returns results for the last 30 days.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromrefundamount",
            "in": "query",
            "description": "When provided only payments with amount equal or higher than provided amount will be returned",
            "schema": {
              "maximum": 999999999.99,
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "name": "torefundamount",
            "in": "query",
            "description": "When provided only payments with amount equal or smaller than  provided amount will be returned",
            "schema": {
              "maximum": 999999999.99,
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "name": "refundstatus",
            "in": "query",
            "description": "A number of statuses can be queried within a single request by providing multiple occurences of the parameter. If not provided all statuses will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ALL",
                  "REFUND_REJECTED",
                  "REFUND_COMPLETE",
                  "REFUND_PENDING"
                ]
              }
            }
          },
          {
            "name": "pagenumber",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pagesize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRefundListResponseEnvelope"
                },
                "example": {
                  "uri": "/payments/ybo8zayk2q/refunds/",
                  "data": [
                    {
                      "id": "azo4kal13b",
                      "uri": "/payments/ybo8zayk2q/refunds/azo4kal13b",
                      "creationDateTime": "2019-02-28T10:43:07.00Z",
                      "lastUpdateDateTime": "2019-02-28T10:43:07.00Z",
                      "status": "REFUND_PENDING",
                      "refundAmount": 100.01,
                      "compensationAmount": 10.01,
                      "currency": "GBP",
                      "remittanceInformation": {
                        "reference": "reference",
                        "unstructured": "unstructuredRemittanceInfo"
                      },
                      "endToEndIdentification": "endToEndIdentification"
                    }
                  ],
                  "page": {
                    "pageNumber": 1,
                    "pageSize": 10,
                    "totalElements": 1,
                    "totalPages": 1
                  },
                  "sort": []
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "returnCode": "T0000",
                  "returnDescription": "Validation errors occurred. Please see details.",
                  "details": {
                    "code": "T0004",
                    "description": "Field is invalid",
                    "field": "email"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "returnCode": "T0000",
                  "returnDescription": "Validation errors occurred. Please see details.",
                  "details": {
                    "code": "T0016",
                    "description": "Amount has to be greater than 0.",
                    "field": "amount"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "headers": {
              "Retry-After": {
                "description": "Number in seconds to wait",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          }
        },
        "security": [
          {
            "MerchantOAuth2": [
              "openbanking_pisp"
            ]
          },
          {
            "MerchantApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "PISP Service"
        ],
        "summary": "Refund Payment",
        "description": "Refund a payment using POST",
        "operationId": "refundPaymentUsingPOST",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "The ID of the payment which you want to refund",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours.",
            "schema": {
              "type": "string",
              "x-sentenial": {
                "enriched": true
              }
            },
            "x-sentenial": {
              "enriched": true
            }
          }
        ],
        "requestBody": {
          "description": "Refund an exising payment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRefundRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRefundResponseEnvelope"
                },
                "example": {
                  "uri": "/payments/ybo8zayk2q/refunds/azo4kal13b",
                  "data": {
                    "id": "azo4kal13b",
                    "uri": "/payments/ybo8zayk2q/refunds/azo4kal13b",
                    "creationDateTime": "2019-02-28T10:43:07.00Z",
                    "lastUpdateDateTime": "2019-02-28T10:43:07.00Z",
                    "status": "REFUND_PENDING",
                    "refundAmount": 100.01,
                    "compensationAmount": 10.01,
                    "currency": "GBP",
                    "remittanceInformation": {
                      "reference": "reference",
                      "unstructured": "unstructuredRemittanceInfo"
                    },
                    "endToEndIdentification": "endToEndIdentification"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "returnCode": "T0000",
                  "returnDescription": "Validation errors occurred. Please see details.",
                  "details": {
                    "code": "T0004",
                    "description": "Field is invalid",
                    "field": "email"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "returnCode": "T0000",
                  "returnDescription": "Validation errors occurred. Please see details.",
                  "details": {
                    "code": "T0016",
                    "description": "Amount has to be greater than 0.",
                    "field": "amount"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "headers": {
              "Retry-After": {
                "description": "Number in seconds to wait",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            },
            "x-sentenial": {
              "enriched": "true"
            }
          }
        },
        "security": [
          {
            "MerchantOAuth2": [
              "openbanking_refund"
            ]
          },
          {
            "MerchantApiKey": []
          }
        ],
        "x-codegen-request-body-name": "refundPaymentRequest"
      }
    },
    "/payments/{paymentId}/refunds/{refundId}": {
      "get": {
        "tags": [
          "PISP Service"
        ],
        "summary": "Retrieve Refund",
        "description": "GET Refund details endpoint",
        "operationId": "getRefundUsingGET",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "The ID of the payment for which you want to retrieve details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refundId",
            "in": "path",
            "description": "The ID of the refund for which you want to retrieve details",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRefundResponseEnvelope"
                },
                "example": {
                  "uri": "/payments/ybo8zayk2q/refunds/azo4kal13b",
                  "data": {
                    "id": "azo4kal13b",
                    "uri": "/payments/ybo8zayk2q/refunds/azo4kal13b",
                    "creationDateTime": "2019-02-28T10:43:07.00Z",
                    "lastUpdateDateTime": "2019-02-28T10:43:07.00Z",
                    "status": "REFUND_REJECTED",
                    "refundAmount": 100.01,
                    "compensationAmount": 10.01,
                    "currency": "GBP",
                    "remittanceInformation": {
                      "reference": "reference",
                      "unstructured": "unstructuredRemittanceInfo"
                    },
                    "endToEndIdentification": "endToEndIdentification",
                    "errorDetails": [
                      "5008",
                      "5016"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "headers": {
              "Retry-After": {
                "description": "Number in seconds to wait",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {}
              }
            },
            "x-sentenial": {
              "enriched": "true"
            }
          }
        },
        "security": [
          {
            "MerchantOAuth2": [
              "openbanking_refund_read"
            ]
          },
          {
            "MerchantApiKey": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "type": "object",
        "properties": {
          "streetName": {
            "maxLength": 70,
            "minLength": 1,
            "type": "string",
            "description": "Name of a street or thoroughfare."
          },
          "buildingNumber": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Number that identifies the position of a building on a street."
          },
          "postCode": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail."
          },
          "townName": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "Name of a built-up area, with defined boundaries, and a local government."
          },
          "country": {
            "pattern": "^[A-Z]{2,2}$",
            "type": "string",
            "description": "ISO 3166 ALPHA2 country code."
          },
          "addressLine": {
            "maxItems": 2,
            "minItems": 0,
            "type": "array",
            "description": "Information that locates and identifies a specific address, as defined by postal services, presented in free format text.",
            "items": {
              "maxLength": 70,
              "minLength": 1,
              "type": "string"
            }
          }
        },
        "description": "Postal Address Details."
      },
      "Bank": {
        "title": "Bank",
        "required": [
          "country",
          "debtorAccountRequired",
          "id",
          "logo",
          "name",
          "supportedCurrencies",
          "uri"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Banks Id"
          },
          "uri": {
            "type": "string",
            "description": "Uri to Bank Resource"
          },
          "name": {
            "type": "string",
            "description": "The Banks Name"
          },
          "logo": {
            "type": "string",
            "description": "The Banks Logo http location"
          },
          "supportedCurrencies": {
            "type": "array",
            "description": "Holds list of payment currencies that the bank can process.",
            "items": {
              "type": "string",
              "description": "ISO currency code."
            }
          },
          "country": {
            "type": "string",
            "description": "countryCode - ISO country code - indicates where the Bank is located (ISO 3166 Alpha-2)"
          },
          "debtorAccountRequired": {
            "type": "boolean",
            "description": "TRUE if debtorAccount is required by Aspsp."
          },
          "bankMetaData": {
            "$ref": "#/components/schemas/BankMetaData"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestResponseLink"
            }
          }
        }
      },
      "BankMetaData": {
        "type": "object",
        "properties": {
          "debtorAddress": {
            "type": "string",
            "description": "Indicates if 'Debtor Address' is required by the bank. Returns either, 'required', 'optional' or 'notSupported'."
          },
          "creditorAddress": {
            "type": "string",
            "description": "Indicates if 'Creditor Address' is required by the bank. Returns either, 'required', 'optional' or 'notSupported'."
          },
          "remittanceInformation": {
            "type": "string",
            "description": "Indicates if 'Remittance Information' is required by the bank. Returns either, 'required', 'optional' or 'notSupported'."
          },
          "psuId": {
            "type": "string",
            "description": "Indicates if 'PSU-ID' is required by the bank. Returns either, 'required', 'optional' or 'notSupported'."
          },
          "customerIpAddress": {
            "type": "string",
            "description": "Indicates if 'Customer IP Address' is required by the bank. Returns either, 'required', 'optional' or 'notSupported'."
          },
          "minimumPaymentValue": {
            "type": "number",
            "description": "Indicates the minimum payment value accepted by the bank. A value of 0.00 indicates this parameter is not supported by the bank."
          },
          "maximumPaymentValue": {
            "type": "number",
            "description": "Indicates the maximum payment value accepted by the bank. A value of 0.00 indicates this parameter is not supported by the bank."
          }
        }
      },
      "BanksResponse": {
        "title": "BanksResponse",
        "required": [
          "data",
          "page",
          "sort",
          "uri"
        ],
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "description": "Holds queried resource uri."
          },
          "data": {
            "type": "array",
            "description": "Banks collection",
            "items": {
              "$ref": "#/components/schemas/Bank"
            }
          },
          "page": {
            "$ref": "#/components/schemas/RestResponsePaginationDetails"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "uri": "/banks",
          "data": [
            {
              "id": "8ow24y2pdx",
              "uri": "/banks/8ow24y2pdx",
              "name": "Nuapay",
              "logo": "https://www.nuapay.com/wp-content/uploads/2018/04/nuapay.svg",
              "supportedCurrencies": [
                "GBP",
                "EUR"
              ],
              "country": "GB",
              "debtorAccountRequired": false,
              "bankMetaData": {
                "debtorAddress": "required",
                "creditorAddress": "required",
                "remittanceInformation": "optional",
                "psuId": "notSupported",
                "customerIpAddress": "notSupported",
                "minimumPaymentValue": 0.01,
                "maximumPaymentValue": 9999.99
              },
              "links": [
                {
                  "id": "8ww64y0phx",
                  "resourceType": "bankFamily",
                  "uri": "/bankFamilies/8ww64y0phx"
                }
              ]
            }
          ],
          "page": {
            "pageNumber": 1,
            "pageSize": 10,
            "totalElements": 1,
            "totalPages": 1
          },
          "sort": []
        }
      },
      "BankFamilyResponse": {
        "title": "BankFamilyResponse",
        "required": [
          "id",
          "logo",
          "name",
          "supportedCurrencies",
          "uri"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Banks Family Id, used to group branches belong to the same Bank"
          },
          "uri": {
            "type": "string",
            "description": "Uri to Bank Family Resource"
          },
          "name": {
            "type": "string",
            "description": "The Bank Family Name"
          },
          "logo": {
            "type": "string",
            "description": "The Bank Family Logo http location"
          },
          "supportedCurrencies": {
            "type": "array",
            "description": "Holds list of payment currencies that the Bank Family can process.",
            "items": {
              "type": "string",
              "description": "ISO currency code."
            }
          }
        }
      },
      "BankFamilyResponseEnvelope": {
        "title": "BankFamilyResponseEnvelope",
        "required": [
          "data",
          "uri"
        ],
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "description": "Holds queried resource uri."
          },
          "data": {
            "type": "array",
            "description": "Bank Family collection",
            "items": {
              "$ref": "#/components/schemas/BankFamilyResponse"
            }
          }
        },
        "example": {
          "uri": "/bankFamily/",
          "data": {
            "id": "8ww64y0phx",
            "uri": "/bankFamilies/8ww64y0phx",
            "name": "Nuapay France",
            "logo": "https://www.nuapay.com/wp-content/uploads/2018/04/nuapay.svg",
            "supportedCurrencies": [
              "EUR"
            ]
          }
        }
      },
      "CreditorAccount": {
        "title": "CreditorAccount",
        "required": [
          "identification",
          "schemeName"
        ],
        "type": "object",
        "properties": {
          "identification": {
            "maxLength": 34,
            "minLength": 1,
            "type": "string",
            "description": "Identification assigned by an institution to identify an account. This identification is known by the account owner."
          },
          "name": {
            "maxLength": 70,
            "minLength": 1,
            "type": "string",
            "description": "Name of the account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account. Usage - The account name is different from the account owner name. The account name is used in certain user communities to provide a means of identifying the account, in addition to the account owner's identity and the account number."
          },
          "schemeName": {
            "type": "string",
            "description": "Name of the identification scheme, in a coded form as published in an external list.",
            "enum": [
              "IBAN",
              "SortCodeAccountNumber"
            ]
          },
          "secondaryIdentification": {
            "maxLength": 34,
            "minLength": 1,
            "type": "string",
            "description": "Identification assigned by an institution to identify an account. This identification is known by the account owner."
          }
        },
        "description": "Unambiguous identification of the account of the creditor to which a credit entry will be made as a result of the transaction."
      },
      "DebtorAccount": {
        "title": "DebtorAccount",
        "required": [
          "identification",
          "schemeName"
        ],
        "type": "object",
        "properties": {
          "identification": {
            "maxLength": 34,
            "minLength": 1,
            "type": "string",
            "description": "Identification assigned by an institution to identify an account. This identification is known by the account owner."
          },
          "name": {
            "maxLength": 70,
            "minLength": 1,
            "type": "string",
            "description": "Name of the account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account. Usage: The account name is different from the account owner name. The account name is used in certain user communities to provide a means of identifying the account, in addition to the account owner's identity and the account number."
          },
          "schemeName": {
            "type": "string",
            "description": "Name of the identification scheme, in a coded form as published in an external list.",
            "enum": [
              "IBAN",
              "SortCodeAccountNumber"
            ]
          },
          "secondaryIdentification": {
            "maxLength": 34,
            "minLength": 1,
            "type": "string",
            "description": "Identification assigned by an institution to identify an account. This identification is known by the account owner."
          }
        },
        "description": "Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction."
      },
      "DeliveryAddress": {
        "title": "DeliveryAddress",
        "required": [
          "country",
          "townName"
        ],
        "type": "object",
        "properties": {
          "addressLine": {
            "maxItems": 2,
            "minItems": 0,
            "type": "array",
            "description": "Information that locates and identifies a specific address, as defined by postal services, that is presented in free format text.",
            "items": {
              "maxLength": 70,
              "minLength": 1,
              "type": "string"
            }
          },
          "streetName": {
            "maxLength": 70,
            "minLength": 1,
            "type": "string",
            "description": "Name of a street or thoroughfare."
          },
          "buildingNumber": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Number that identifies the position of a building on a street."
          },
          "postCode": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail."
          },
          "townName": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "Name of a built-up area, with defined boundaries, and a local government."
          },
          "countrySubDivision": {
            "maxItems": 2,
            "minItems": 0,
            "type": "array",
            "description": "Identifies a subdivision of a country, for instance state, region, county.",
            "items": {
              "maxLength": 35,
              "minLength": 1,
              "type": "string"
            }
          },
          "country": {
            "pattern": "^[A-Z]{2,2}$",
            "type": "string",
            "description": "Nation with its own government, occupying a particular territory."
          }
        },
        "description": "Information that locates and identifies a specific address, as defined by postal services or in free format text."
      },
      "ErrorDetailsItem": {
        "title": "ErrorDetailsItem",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "description": {
            "type": "string",
            "description": "Error description"
          },
          "field": {
            "type": "string",
            "description": "JSON path to request object property the error is related to"
          }
        }
      },
      "ErrorResponse": {
        "title": "ErrorResponse",
        "type": "object",
        "properties": {
          "details": {
            "type": "array",
            "description": "Holds list of input validation errors",
            "items": {
              "$ref": "#/components/schemas/ErrorDetailsItem"
            }
          },
          "returnCode": {
            "type": "string",
            "description": "Error type code"
          },
          "returnDescription": {
            "type": "string",
            "description": "Error type description"
          }
        }
      },
      "Items": {
        "title": "Items",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The name of the item being purchased by the PSU."
          },
          "description": {
            "maxLength": 254,
            "minLength": 1,
            "type": "string",
            "description": "Brief description of the item being purchased by the PSU"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantiy of the particular item being purchased by the PSU.",
            "format": "int32"
          },
          "amount": {
            "maximum": 999999999999.99,
            "minimum": -999999999999.99,
            "type": "number",
            "description": "Amount of payment in the specified currency at the specified rate."
          }
        }
      },
      "MultiAuthorisation": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Specifies the status of the authorisation flow in code form.",
            "enum": [
              "AUTHORISED",
              "AWAITING_FURTHER_AUTHORISATION",
              "REJECTED"
            ]
          },
          "numberRequired": {
            "type": "integer",
            "description": "Number of authorisations required for payment order (total required at the start of the multi authorisation journey).",
            "format": "int32"
          },
          "numberReceived": {
            "type": "integer",
            "description": "Number of authorisations received.",
            "format": "int32"
          },
          "lastUpdateDateTime": {
            "type": "string",
            "description": "Last date and time at the authorisation flow was updated.",
            "format": "date-time"
          },
          "expirationDateTime": {
            "type": "string",
            "description": "Date and time at which the requested authorisation flow must be completed.",
            "format": "date-time"
          }
        },
        "description": "The multiple authorisation flow response from the ASPSP."
      },
      "OrderDetails": {
        "title": "OrderDetails",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "Holds list of the line items to be returned to the TPP UI",
            "items": {
              "$ref": "#/components/schemas/Items"
            }
          }
        },
        "description": "Holds Order Details related to payment amount."
      },
      "PaginatedListPaymentResponseEnvelope": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentResponse"
            }
          },
          "page": {
            "$ref": "#/components/schemas/RestResponsePaginationDetails"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uri": {
            "type": "string",
            "description": "resource Uri"
          }
        }
      },
      "PaginatedListBankFamiliesResponseEnvelope": {
        "title": "PaginatedListBankFamiliesResponseEnvelope",
        "required": [
          "data",
          "page",
          "sort",
          "uri"
        ],
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "description": "resource Uri"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankFamilyResponse"
            }
          },
          "page": {
            "$ref": "#/components/schemas/RestResponsePaginationDetails"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PaymentRefundListResponseEnvelope": {
        "required": [
          "data",
          "uri"
        ],
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "description": "resource Uri"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentRefundResponse"
            }
          },
          "page": {
            "$ref": "#/components/schemas/RestResponsePaginationDetails"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PaymentHistoryResponseEnvelope": {
        "required": [
          "data",
          "uri"
        ],
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "description": "resource Uri."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentHistoryEvent"
            }
          },
          "page": {
            "$ref": "#/components/schemas/RestResponsePaginationDetails"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PaymentHistoryEvent": {
        "required": [
          "createDateTime",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestResponseLink"
            }
          },
          "uri": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "paymentStatus",
            "enum": [
              "PENDING",
              "PENDING_APPROVAL",
              "OAUTH_CALLBACK_COMPLETE",
              "AUTHORISED",
              "DECLINED",
              "SETTLEMENT_REJECTED",
              "SETTLEMENT_PENDING",
              "SETTLEMENT_IN_PROGRESS",
              "SETTLEMENT_COMPLETE",
              "CONSENT_API_REJECTED",
              "TIMEOUT",
              "CONSENT_TIMEOUT",
              "UNEXPECTED_ERROR",
              "UNKNOWN",
              "PAYMENT_RECEIVED"
            ]
          },
          "createDateTime": {
            "type": "string",
            "description": "Date and time when a status has changed. An example is below: 2019-02-28T10:43:07+00:00",
            "format": "date-time"
          }
        }
      },
      "PaymentRequest": {
        "title": "PaymentRequest",
        "required": [
          "amount",
          "countryCode",
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "maximum": 999999999999.99,
            "minimum": 0.01,
            "type": "number",
            "description": "amount"
          },
          "currency": {
            "type": "string",
            "description": "transaction currency",
            "enum": [
              "GBP",
              "EUR"
            ]
          },
          "countryCode": {
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "countryCode - ISO country code - indicates where customer is domiciled (ISO 3166 Alpha-2)"
          },
          "language": {
            "pattern": "^[a-z]{2}$",
            "type": "string",
            "description": "the customers preferred language, defaults to en ISO 639-1: two-letter codes, one per language"
          },
          "email": {
            "maxLength": 254,
            "minLength": 1,
            "pattern": ".*@.*",
            "type": "string",
            "description": "Email address where payment status notifications will be sent to"
          },
          "orderDetails": {
            "$ref": "#/components/schemas/OrderDetails"
          },
          "integrationType": {
            "type": "string",
            "description": "Allows to specify if the UI integration is done via Checkout, Redirect or it is Self Hosted by the merchant.",
            "enum": [
              "CHECKOUT",
              "SELF_HOSTED",
              "SELF_HOSTED_CALLBACK",
              "REDIRECT"
            ]
          },
          "merchantPostAuthUrl": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The merchant url to redirect PSU post authorization step. The field is required for following integration types SELF_HOSTED, SELF_HOSTED_CALLBACK, REDIRECT."
          },
          "bankId": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "description": "The bank id returned by List Banks API. This is the bank where PSU holds its account"
          },
          "endToEndIdentification": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "Unique identification assigned by the initiating party to unambiguously identify the transaction."
          },
          "paymentTimeout": {
            "maximum": 7776000,
            "minimum": 1,
            "type": "integer",
            "description": "A time in which the PSU can authorise the payment in seconds",
            "format": "int32"
          },
          "remittanceInformation": {
            "$ref": "#/components/schemas/RemittanceInformation"
          },
          "requestedExecutionDate": {
            "type": "string",
            "description": "Date the payment should be executed on. Defaults to current processing date. Future date allowed only for EUR payments processed by French Banks under STET standard.",
            "format": "date"
          },
          "debtorAccount": {
            "$ref": "#/components/schemas/DebtorAccount"
          },
          "debtorAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "creditorAccount": {
            "$ref": "#/components/schemas/CreditorAccount"
          },
          "creditorAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "paymentScheme": {
            "type": "string",
            "description": "Allows to select payment scheme the payment should be initiated with. Defaults to UK Faster Payments for GBP and SEPA Credit Transfer for EUR.",
            "enum": [
              "UK_FASTER_PAYMENT",
              "SEPA_CREDIT_TRANSFER",
              "SEPA_INSTANT_CREDIT_TRANSFER"
            ]
          },
          "risk": {
            "$ref": "#/components/schemas/Risk"
          }
        },
        "example": {
          "amount": 99.99,
          "countryCode": "GB",
          "currency": "GBP",
          "email": "client@example.com",
          "language": "en",
          "endToEndIdentification": "endToEndIdentification123",
          "remittanceInformation": {
            "reference": "reference123"
          },
          "orderDetails": {
            "items": [
              {
                "name": "Flights Outbound",
                "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                "quantity": 2,
                "amount": 50
              },
              {
                "name": "Flights Return",
                "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                "quantity": 2,
                "amount": 50
              },
              {
                "name": "Flights Return",
                "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                "quantity": 2,
                "amount": 30
              },
              {
                "name": "Discounts",
                "amount": -5
              },
              {
                "name": "Total",
                "amount": 125
              }
            ]
          },
          "integrationType": "SELF_HOSTED",
          "merchantPostAuthUrl": "https://merchant.openbanking.com/result",
          "bankId": "lyboxy9bqp",
          "debtorAccount": {
            "identification": 60161331926819,
            "schemeName": "SortCodeAccountNumber"
          }
        }
      },
      "PaymentResponse": {
        "title": "PaymentResponse",
        "required": [
          "amount",
          "countryCode",
          "creationDateTime",
          "currency",
          "id",
          "merchantId",
          "paymentTimeout",
          "status",
          "uri"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id, this is used to get updates on the payment"
          },
          "userInterfacePaymentId": {
            "type": "string",
            "description": "userInterfacePaymentId, this is used in UI flows to get updates on the payment"
          },
          "uri": {
            "type": "string",
            "description": "Location of the resource"
          },
          "merchantId": {
            "type": "string",
            "description": "The ID of the merchant associated to the payment"
          },
          "creationDateTime": {
            "type": "string",
            "description": "Creation date and time for the payment resource",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "paymentStatus, the latest payment status",
            "enum": [
              "PENDING",
              "PENDING_APPROVAL",
              "OAUTH_CALLBACK_COMPLETE",
              "AUTHORISED",
              "DECLINED",
              "SETTLEMENT_REJECTED",
              "SETTLEMENT_PENDING",
              "SETTLEMENT_IN_PROGRESS",
              "SETTLEMENT_COMPLETE",
              "CONSENT_API_REJECTED",
              "TIMEOUT",
              "CONSENT_TIMEOUT",
              "UNEXPECTED_ERROR",
              "UNKNOWN",
              "PAYMENT_RECEIVED"
            ]
          },
          "amount": {
            "maximum": 999999999999.99,
            "minimum": 0.01,
            "type": "number",
            "description": "Amount of the payment"
          },
          "currency": {
            "type": "string",
            "description": "Transaction currency",
            "enum": [
              "GBP",
              "EUR"
            ]
          },
          "countryCode": {
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "countryCode - ISO country code - indicates where customer is domiciled (ISO 3166 Alpha-2)"
          },
          "language": {
            "pattern": "^[a-z]{2}$",
            "type": "string",
            "description": "the customers preferred language, defaults to en ISO 639-1: two-letter codes, one per language"
          },
          "email": {
            "maxLength": 254,
            "minLength": 1,
            "pattern": ".*@.*",
            "type": "string",
            "description": "Email address where payment status notifications will be sent to"
          },
          "orderDetails": {
            "$ref": "#/components/schemas/OrderDetails"
          },
          "integrationType": {
            "type": "string",
            "description": "Allows to specify if the UI integration is done via Checkout, Redirect or it is Self Hosted by the merchant.",
            "enum": [
              "CHECKOUT",
              "SELF_HOSTED",
              "SELF_HOSTED_CALLBACK",
              "REDIRECT"
            ]
          },
          "merchantPostAuthUrl": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The merchant url to redirect PSU post authorization step. The field is required for following integration types SELF_HOSTED, SELF_HOSTED_CALLBACK, REDIRECT."
          },
          "bankId": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "description": "The bank id returned by List Banks API. This is the bank where PSU holds its account"
          },
          "aspspAuthUrl": {
            "maxLength": 2048,
            "minLength": 1,
            "type": "string",
            "description": "The ASPSP url to redirect the PSU to for authorization of the payment"
          },
          "endToEndIdentification": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "Unique identification assigned by the initiating party to unambiguously identify the transaction"
          },
          "remittanceInformation": {
            "$ref": "#/components/schemas/RemittanceInformation"
          },
          "requestedExecutionDate": {
            "type": "string",
            "description": "Date that the payment has been requested to be executed on.",
            "format": "date"
          },
          "debtorBankName": {
            "maxLength": 70,
            "minLength": 1,
            "type": "string",
            "description": "The name of the debtor bank"
          },
          "debtorAccount": {
            "$ref": "#/components/schemas/DebtorAccount"
          },
          "debtorAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "creditorAccount": {
            "$ref": "#/components/schemas/CreditorAccount"
          },
          "creditorAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "paymentScheme": {
            "type": "string",
            "description": "Allows to select payment scheme the payment should be initiated with. Defaults to UK Faster Payments for GBP and SEPA Credit Transfer for EUR.",
            "enum": [
              "UK_FASTER_PAYMENT",
              "SEPA_CREDIT_TRANSFER",
              "SEPA_INSTANT_CREDIT_TRANSFER"
            ]
          },
          "risk": {
            "$ref": "#/components/schemas/Risk"
          },
          "cutOffDateTime": {
            "type": "string",
            "description": "Specified cut-off date and time for the payment consent.",
            "format": "date-time"
          },
          "expectedExecutionDateTime": {
            "type": "string",
            "description": "Expected execution date and time for the payment resource.",
            "format": "date-time"
          },
          "expectedSettlementDateTime": {
            "type": "string",
            "description": "Expected settlement date and time for the payment resource.",
            "format": "date-time"
          },
          "paymentTimeout": {
            "maximum": 7776000,
            "minimum": 1,
            "type": "integer",
            "description": "A time in which the PSU can authorise the payment in seconds",
            "format": "int32"
          },
          "multiAuthorisation": {
            "$ref": "#/components/schemas/MultiAuthorisation"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestResponseLink"
            }
          }
        }
      },
      "PaymentResponseEnvelope": {
        "title": "PaymentResponseEnvelope",
        "required": [
          "data",
          "uri"
        ],
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "description": "Holds resource uri."
          },
          "data": {
            "$ref": "#/components/schemas/PaymentResponse"
          }
        },
        "example": {
          "uri": "/payments/re27gry2dw",
          "data": {
            "id": "re27gry2dw",
            "uri": "/payments/re27gry2dw",
            "endToEndIdentification": "endToEndIdentification123",
            "debtorAccount": {
              "identification": 60161331926819,
              "schemeName": "SortCodeAccountNumber"
            },
            "risk": {
              "paymentContextCode": "Other"
            },
            "remittanceInformation": {
              "reference": "reference123"
            },
            "status": "PENDING_APPROVAL",
            "amount": 99.99,
            "currency": "GBP",
            "countryCode": "GB",
            "language": "en",
            "email": "client@example.com",
            "orderDetails": {
              "items": [
                {
                  "name": "Flights Outbound",
                  "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                  "quantity": 2,
                  "amount": 50
                },
                {
                  "name": "Flights Return",
                  "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                  "quantity": 2,
                  "amount": 50
                },
                {
                  "name": "Flights Return",
                  "description": "Dublin(DUB) to London(LCY) - Adult Fare",
                  "quantity": 2,
                  "amount": 30
                },
                {
                  "name": "Discounts",
                  "quantity": 0,
                  "amount": -5
                },
                {
                  "name": "Total",
                  "quantity": 0,
                  "amount": 125
                }
              ]
            },
            "integrationType": "SELF_HOSTED",
            "merchantPostAuthUrl": "https://merchant.openbanking.com/result",
            "bankId": "lyboxy9bqp",
            "aspspAuthUrl": "https://any-aspsp.com/openbanking/authorize?response_type=code+id_token&scope=openid+payments&client_id=377aaa6a-70bf-4e95-ac19-2bac5270bacd&redirect_uri=https%3A%2F%2Fapi.nuapay.com%2Ftpp%2Fpayment-requests%2Foauth&state=df78b5f6-12c0-4646-b47c-4362217acb0a&nonce=bea92693-19da-4609-858e-86c79e908a08&request=eyJraWQiOiI2QlJZamgtc0VRUTNmNWlzc0lxWU9WNGNXdVUiLCJ0eXAiOiJKV1QiLCJhbGciOiJQUzI1NiJ9.eyJpc3MiOiIzNzdhYWE2YS03MGJmLTRlOTUtYWMxOS0yYmFjNTI3MGJhY2QiLCJyZXNwb25zZV90eXBlIjoiY29kZSBpZF90b2tlbiIsIm5vbmNlIjoiYmVhOTI2OTMtMTlkYS00NjA5LTg1OGUtODZjNzllOTA4YTA4IiwiY2xpZW50X2lkIjoiMzc3YWFhNmEtNzBiZi00ZTk1LWFjMTktMmJhYzUyNzBiYWNkIiwibWF4X2FnZSI6ODY0MDAsImF1ZCI6Imh0dHBzOlwvXC9hdXRob3Jpc2UtYXBpLmxsb3lkc2JhbmsuY28udWtcL3Byb2QwMVwvY2hhbm5lbFwvbHlkcyIsInNjb3BlIjoib3BlbmlkIHBheW1lbnRzIiwiY2xhaW1zIjp7InVzZXJpbmZvIjp7Im9wZW5iYW5raW5nX2ludGVudF9pZCI6eyJ2YWx1ZSI6IjY0YWQ5NWEwLWUzMWYtNGNiOC04NjM3LTdjOGRmOTc3MTJmOSIsImVzc2VudGlhbCI6dHJ1ZX19LCJpZF90b2tlbiI6eyJvcGVuYmFua2luZ19pbnRlbnRfaWQiOnsidmFsdWUiOiI2NGFkOTVhMC1lMzFmLTRjYjgtODYzNy03YzhkZjk3NzEyZjkiLCJlc3NlbnRpYWwiOnRydWV9LCJhY3IiOnsiZXNzZW50aWFsIjp0cnVlLCJ2YWx1ZXMiOlsidXJuOm9wZW5iYW5raW5nOnBzZDI6c2NhIiwidXJuOm9wZW5iYW5raW5nOnBzZDI6Y2EiXX19fSwicmVkaXJlY3RfdXJpIjoiaHR0cHM6XC9cL2FwaS5udWFwYXkuY29tXC90cHBcL3BheW1lbnQtcmVxdWVzdHNcL29hdXRoIiwic3RhdGUiOiJkZjc4YjVmNi0xMmMwLTQ2NDYtYjQ3Yy00MzYyMjE3YWNiMGEiLCJleHAiOjE1NzU0NTg3MTYsImlhdCI6MTU3NTQ1ODQxNiwianRpIjoiNDQyYmY4N2YtYzIxNC00NjgxLTk3ODYtZjIwZGM1YjIzOWYxIn0.IyeHKQQeU6x32CdUllkskLFWEjkJZKzvp8D4ZOwtlN3v32qmbh4hkGtwNilqZetqqq1ESB1InzfyAlb5S3GyZ_1pTV5UmFqsY60w4jIvSVQXmxKyCYIDrdgTvfa3IYOtA3vStpRpnHyXZfke7mBLGM0nn3YLEmujQ88T1kzq8v9rKTUKwgAE-NYLsYnXNg8dNlrl_lvXVou-J26keS5EaYMVSwHRXcZ8Vp51Hro5L3Py5KyG270RL-7AfJCrEOcvwKbHWOYthoZj1FcuuJWoCT80H1rtkw80vI8QpaQHhp8xYOGft4n6uf2WBhUVb9eBrl9B0GtWe3opBeFXzOtKyg",
            "merchantId": "gabxwwv2l5",
            "creationDateTime": "2020-05-01T08:25:29.291Z",
            "debtorBankName": "Bank Name",
            "multiAuthorisation": {},
            "links": [
              {
                "id": "re27gry2dw",
                "resourceType": "refunds",
                "uri": "/payments/re27gry2dw/refunds"
              },
              {
                "id": "re27gry2dw",
                "resourceType": "history",
                "uri": "/payments/re27gry2dw/history"
              }
            ]
          }
        }
      },
      "PaymentRefundRequest": {
        "required": [
          "currency",
          "refundAmount"
        ],
        "type": "object",
        "properties": {
          "refundAmount": {
            "maximum": 999999999999.99,
            "minimum": 0.01,
            "type": "number"
          },
          "compensationAmount": {
            "maximum": 999999999999.99,
            "minimum": 0.01,
            "type": "number"
          },
          "currency": {
            "type": "string",
            "description": "Transaction currency, must match original payment currency",
            "enum": [
              "GBP",
              "EUR"
            ]
          },
          "endToEndIdentification": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "Unique identification assigned by the initiating party to unambiguously identify the transaction. Note that the field length is limited to 31 characters for payments in GBP currency, processed via UK Faster Payments scheme"
          },
          "remittanceInformation": {
            "$ref": "#/components/schemas/RemittanceInformation"
          }
        }
      },
      "PaymentRefundResponseEnvelope": {
        "title": "refundPaymentResponseEnvelope",
        "required": [
          "data",
          "uri"
        ],
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "description": "Holds resource uri."
          },
          "data": {
            "$ref": "#/components/schemas/PaymentRefundResponse"
          }
        },
        "example": {
          "uri": "/payments/ybo8zayk2q/refunds/azo4kal13b",
          "data": {
            "id": "azo4kal13b",
            "uri": "/payments/ybo8zayk2q/refunds/azo4kal13b",
            "creationDateTime": "2019-02-28T10:43:07.00Z",
            "lastUpdateDateTime": "2019-02-28T10:43:07.00Z",
            "reference": "reference",
            "status": "REFUND_PENDING",
            "refundAmount": 100.01,
            "compensationAmount": 10.01,
            "currency": "GBP",
            "remittanceInformation": {
              "unstructured": "unstructuredRemittanceInfo"
            }
          }
        }
      },
      "PaymentRefundResponse": {
        "title": "PaymentRefundResponse",
        "required": [
          "creationDateTime",
          "currency",
          "id",
          "refundAmount",
          "status",
          "uri"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id, this is used to get updates on the payment"
          },
          "uri": {
            "type": "string",
            "description": "Holds resource uri."
          },
          "creationDateTime": {
            "type": "string",
            "description": "Date and time when refund was created.",
            "format": "date-time"
          },
          "lastUpdateDateTime": {
            "type": "string",
            "description": "Date and time when refund was last updated.",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "paymentStatus, the latest payment status",
            "enum": [
              "REFUND_PENDING",
              "REFUND_COMPLETE",
              "REFUND_REJECTED",
              "UNKNOWN"
            ]
          },
          "refundAmount": {
            "maximum": 999999999999.99,
            "minimum": 0.01,
            "type": "number",
            "description": "amount"
          },
          "compensationAmount": {
            "maximum": 999999999999.99,
            "minimum": 0.01,
            "type": "number",
            "description": "amount"
          },
          "currency": {
            "type": "string",
            "description": "transaction currency",
            "enum": [
              "GBP",
              "EUR"
            ]
          },
          "remittanceInformation": {
            "$ref": "#/components/schemas/RemittanceInformation"
          },
          "endToEndIdentification": {
            "maxLength": 35,
            "type": "string",
            "description": "Unique identification assigned by the initiating party to unambiguously identify the transaction."
          },
          "errorDetails": {
            "type": "array",
            "description": "List of error codes associated to the refund request",
            "items": {
              "type": "string",
              "description": "Payment error code(s)"
            }
          }
        }
      },
      "RemittanceInformation": {
        "title": "RemittanceInformation",
        "type": "object",
        "properties": {
          "reference": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.  Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money. If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification. OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped."
          },
          "unstructured": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts receivable system, in an unstructured form. 120 characters are available for client use. 20 characters are reserved for internal use."
          }
        },
        "description": "Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts receivable system."
      },
      "RestResponsePaginationDetails": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "description": "Page Number",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Page Size",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "description": "Total Number of elements returned. Response parameter only",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total Number of pages returned. Response parameter only",
            "format": "int32"
          }
        }
      },
      "Risk": {
        "title": "Risk",
        "type": "object",
        "properties": {
          "paymentContextCode": {
            "type": "string",
            "description": "Specifies the payment context.",
            "enum": [
              "BillPayment",
              "EcommerceGoods",
              "EcommerceServices",
              "Other",
              "PartyToParty"
            ]
          },
          "merchantCategoryCode": {
            "maxLength": 4,
            "minLength": 3,
            "type": "string",
            "description": "Category code conforms to ISO 18245, related to the type of services or goods the merchant provides for the transaction."
          },
          "merchantCustomerIdentification": {
            "maxLength": 70,
            "minLength": 1,
            "type": "string",
            "description": "The unique customer identifier of the PSU with the merchant."
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/DeliveryAddress"
          }
        },
        "description": "Risk"
      },
      "RestResponseLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Encoded Id of linked resource"
          },
          "resourceType": {
            "type": "string",
            "description": "Resource Type",
            "enum": [
              "settings",
              "refunds",
              "history",
              "audit",
              "bankFamily"
            ]
          },
          "uri": {
            "type": "string",
            "description": "Resource URI"
          }
        }
      },
      "SetBankPaymentRequest": {
        "required": [
          "bankId"
        ],
        "type": "object",
        "properties": {
          "bankId": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "description": "The bank id returned by List Banks API. This is the bank where PSU holds its account"
          },
          "debtorAccount": {
            "$ref": "#/components/schemas/DebtorAccount"
          }
        },
        "example": {
          "bankId": "ybo8zd8j2q"
        }
      }
    },
    "securitySchemes": {
      "MerchantApiKey": {
        "type": "http",
        "scheme": "basic"
      },
      "PartnerApiKey": {
        "type": "http",
        "scheme": "basic"
      },
      "MerchantOAuth2": {
        "type": "http",
        "scheme": "bearer"
      },
      "PartnerOAuth2": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}